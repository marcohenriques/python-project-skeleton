{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python project skeleton","text":"<p>A cookiecutter template for python projects.</p> <p>Docs: https://marcohenriques.github.io/python-project-skeleton</p> <p>Code: https://github.com/marcohenriques/python-project-skeleton</p>"},{"location":"#features-included","title":"Features included","text":"<ul> <li>GitHub actions CICD to run formatters, linters, and tests. Also support to build and push docker images</li> <li>Dockerfile to ship python apps</li> <li>Documentation with <code>mkdocs</code> using the beautiful <code>material</code> theme</li> <li>Testing using <code>pytest</code> and several plugins</li> <li>Code formatters using <code>ruff</code> and <code>sqlfluff</code> (SQL)</li> <li>Linters using <code>ruff</code> (check configuration file for enabled plugins), <code>mypy</code>, <code>shellcheck</code> and <code>sqlfluff</code></li> <li>Python dependencies vulnerabilities scanner using <code>safety</code></li> <li>Check for issues with dependencies with <code>deptry</code></li> <li><code>pre-commit</code> hooks for some validations</li> <li><code>Makefile</code> to automate some development tasks</li> <li><code>uv</code> to manage your python versions and dependencies</li> <li>Python package pre-configured with:</li> <li>logging using <code>loguru</code></li> <li><code>pydantic</code> to help manage your project settings</li> <li>(optional) CLI example using <code>typer</code></li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>You\u2019ll need to have cookiecutter and uv installed.</p>"},{"location":"#installation","title":"Installation","text":"<p>Run the following command to create a new project on your current directory:</p> <pre><code>cookiecutter gh:marcohenriques/python-project-skeleton\n</code></pre> <p>If you want to use a different version of the template use the following command:</p> <pre><code>cookiecutter gh:marcohenriques/python-project-skeleton -c &lt;VERSION&gt;\n</code></pre> <p>where <code>&lt;VERSION&gt;</code> can be the branch, tag or commit of the template repo.</p>"},{"location":"#template-inputs","title":"Template inputs","text":"<p>The template asks for the following inputs:</p> <ul> <li><code>project_name</code>: The name of the project. This is used to name the project folder.</li> <li><code>package_name</code>: The name of the package. This is used to name the package folder.</li> <li><code>project_description</code>: A short description of the project.</li> <li><code>author_name</code>: The name of the author.</li> <li><code>author_email</code>: The email of the author.</li> <li><code>github_username_or_org_name</code>: The GitHub username or organization name.</li> <li><code>python_version</code>: The python version to use.</li> <li><code>include_docker</code>: Whether to include docker support.</li> <li><code>include_notebooks</code>: Whether to include support for jupyter notebooks.</li> <li><code>include_docs</code>: Whether to include support for documentation.</li> <li><code>include_cli</code>: Whether to include support for a command line interface.</li> </ul>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#060-2024-12-04","title":"0.6.0 (2024-12-04)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>use <code>uv</code> latest features</li> </ul>"},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>build docs (#8)</li> </ul>"},{"location":"changelog/#refactor","title":"Refactor","text":"<ul> <li>add some improvements</li> </ul>"},{"location":"changelog/#050-2024-10-13","title":"0.5.0 (2024-10-13)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>move to <code>uv</code> instead of poetry and pyenv</li> </ul>"},{"location":"changelog/#040-2024-04-07","title":"0.4.0 (2024-04-07)","text":""},{"location":"changelog/#refactor_1","title":"Refactor","text":"<ul> <li>reorganize project (#6)</li> </ul>"},{"location":"changelog/#030-2023-07-22","title":"0.3.0 (2023-07-22)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>move to ruff</li> </ul>"},{"location":"changelog/#fix_1","title":"Fix","text":"<ul> <li>cicd: docker</li> </ul>"},{"location":"changelog/#refactor_2","title":"Refactor","text":"<ul> <li>cicd and configs (#5)</li> </ul>"},{"location":"changelog/#020-2022-12-24","title":"0.2.0 (2022-12-24)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>use poetry version 1.3</li> </ul>"},{"location":"changelog/#010-2022-12-23","title":"0.1.0 (2022-12-23)","text":""},{"location":"changelog/#feat_4","title":"Feat","text":"<ul> <li>update github_actions versions</li> <li>make poetry use active python</li> <li>update CONTRIBUTING.md</li> <li>add and deprecate some configs</li> <li>add docker support</li> <li>poetry: prepare to new poetry 1.2 release</li> <li>add pydantic settings</li> </ul>"},{"location":"changelog/#fix_2","title":"Fix","text":"<ul> <li>docs makefile</li> <li>use target <code>production</code> in make build-docker</li> <li>docker template generation</li> <li>configs</li> </ul>"},{"location":"changelog/#refactor_3","title":"Refactor","text":"<ul> <li>update some project settings</li> <li>remove some examples code</li> <li>change some stuff</li> <li>change some names</li> <li>deprecate a lot of stuff</li> <li>use src project structure</li> <li>add typer as cli and remove some defaults BREAKING CHANGE:</li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Before we start generating our project, make sure you already have everything needed.</p>"},{"location":"quickstart/#generate-project","title":"Generate project","text":"<p>Run the following command to create a new project, on your current directory:</p> <pre><code>cookiecutter gh:marcohenriques/python-project-skeleton\n</code></pre> <p>During this process you\u2019ll be prompted for several inputs to configure your project.</p>"},{"location":"quickstart/#setup-new-generated-project","title":"Setup new generated project","text":"<p>First, go to your project directory:</p> <pre><code>cd &lt;my_project_name&gt;\n</code></pre> <p>Then, to install all the dependencies just run:</p> <pre><code>make install\n</code></pre> <p>To make sure everything is ok, you can run:</p> <pre><code>make test\n</code></pre> <p>If all the tests passed without issues, you\u2019re good to go \ud83d\ude80</p>"},{"location":"requirements/","title":"Requirements","text":""},{"location":"requirements/#rendering-project","title":"Rendering project","text":"<p>To use this template the only requirement is cookiecutter and uv.</p>"},{"location":"requirements/#generated-project","title":"Generated project","text":"<ul> <li>Make</li> <li>uv (version ~0.4.18)</li> </ul> <p>In Linux, make sure you have all required Python dependencies installed:</p> <pre><code>sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev liblzma-dev tk-dev\n</code></pre> <p>To confirm these system dependencies are configured correctly, on your project directory run:</p> <pre><code>make doctor\n</code></pre> <p>After running this, you should see something similar to:</p> <pre><code>Checking for Make...\n\n$ make --version\nGNU Make 3.81\n\u2714 MATCHED: GNU Make\n\nChecking for uv...\n\n$ uv --version\nuv 0.4.18 (7b55e9790 2024-10-01)\n\u2714 MATCHED: 0.4\n\nResults: \u2714 \u2714\n</code></pre> <p>If you have all the \u2714 you\u2019re good to go.</p>"},{"location":"tools_included/docker/","title":"Docker","text":"<p>The project comes with a <code>Dockerfile</code> to helps containerize your application.</p> <p>It already includes some best practices when building docker images, as such:</p> <ul> <li>multi-stage building: to better organize and optimize your build</li> <li>default non-root user when launching your container</li> <li>build from <code>python:&lt;python_version&gt;-slim</code> to keep your image small</li> <li>uses a <code>entrypoint</code> for your container</li> <li>script in <code>docker/entrypoint.sh</code>, modify it according to your needs</li> <li>entrypoint script is called with <code>tini</code><ul> <li>protects you from software that accidentally creates zombie processes</li> <li>ensures that the default signal handlers work for the software you run in your Docker image</li> </ul> </li> </ul>"},{"location":"tools_included/docker/#usage","title":"Usage","text":"<p>To build it:</p> <pre><code>make build-docker\n</code></pre> <p>To run it:</p> <pre><code>make run-docker\n</code></pre>"},{"location":"tools_included/documentation/","title":"Documentation","text":"<p>For building documentation we use <code>mkdocs</code> with the <code>material</code> theme. The <code>material</code> theme already includes several plugins and customizations for <code>mkdocs</code>, you can check the <code>material reference</code> and the <code>PyMdown Extensions</code> on how to get your documentation to the next level \ud83d\ude80.</p> <p>We also packed it with <code>mkdocstrings</code> which allows you automatically create documentation from your source code.</p> <p>The <code>mkdocs.yml</code> file already comes pre-filled with some plugins and extensions, just add/remove according to your needs.</p>"},{"location":"tools_included/formatters/","title":"Formatters","text":"<p>To make sure all our code follows the same format without much effort, we can leverage some tools to do it for us. By default the project is configured to use a line length of <code>100</code>.</p>"},{"location":"tools_included/formatters/#ruff","title":"<code>ruff</code>","text":"<p>We use <code>ruff</code> to format our code.  </p> <p>Check configs on <code>pyproject.toml</code>.</p>"},{"location":"tools_included/formatters/#sqlfluff","title":"<code>sqlfluff</code>","text":"<p>We use <code>sqlfluff</code> to format our SQL code.  </p> <p>Check configs on <code>pyproject.toml</code>.</p>"},{"location":"tools_included/github_actions/","title":"GitHub Actions","text":"<p>The project bundles some workflows templates and some additional GitHub utils.</p> <ul> <li><code>dependabot.yml</code>: to automatically check if your python dependencies and github actions are up to date</li> <li><code>labeler.yml</code>: configuration to automatically add labels to your PR\u2019s based on the changed files</li> <li>workflows:</li> <li><code>build_docker.yaml</code>: template workflow to build and push images to ghcr.io</li> <li><code>ci.yaml</code>: runs linters and tests</li> <li><code>main.yaml</code>: main cicd workflow</li> <li><code>pr-lint.yaml</code>: adds labels to your PR based on configuration and make sure PR title follows defined convention</li> </ul>"},{"location":"tools_included/ide_settings/","title":"IDE Settings","text":"<p>When you generate the project, the project will generate config file(s) to help set up your IDE to use some development tool.</p>"},{"location":"tools_included/ide_settings/#vscode","title":"VSCode","text":"<p>A <code>settings.json</code> file will be generated:</p> .vscode/settings.json<pre><code>{\n  \"python.defaultInterpreterPath\": \"${workspaceFolder}/.venv/bin/python3\",\n  \"python.terminal.activateEnvironment\": true,\n  // Linters/formatters\n  \"ruff.path\": [\n    \"${workspaceFolder}/.venv/bin/ruff\"\n  ],\n  \"ruff.lint.args\": [\n    \"--config=${workspaceFolder}/pyproject.toml\"\n  ],\n  \"ruff.format.args\": [\n    \"--config=${workspaceFolder}/pyproject.toml\"\n  ],\n  \"mypy-type-checker.args\": [\n    \"--config-file=${workspaceFolder}/pyproject.toml\"\n  ],\n  \"sqlfluff.config\": \"${workspaceFolder}/pyproject.toml\",\n  \"sqlfluff.executablePath\": \"${workspaceFolder}/.venv/bin/sqlfluff\",\n  // Tests\n  \"python.testing.pytestEnabled\": true,\n  \"python.testing.pytestPath\": \"${workspaceFolder}/.venv/bin/pytest\",\n  \"python.testing.pytestArgs\": [],\n  // Vertical lines num characters\n  \"editor.rulers\": [\n    120\n  ],\n  \"[python]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.defaultFormatter\": \"charliermarsh.ruff\",\n    \"editor.codeActionsOnSave\": {\n      \"source.fixAll\": true\n    },\n    \"editor.rulers\": [\n      {\n        \"column\": 80,\n        \"color\": \"#40824c38\"\n      },\n      {\n        \"column\": 100,\n        \"color\": \"#80808067\"\n      },\n      {\n        \"column\": 120,\n        \"color\": \"#ff010168\"\n      },\n    ]\n  },\n  \"[jsonc]\": {\n    \"editor.rulers\": []\n  },\n  \"[git-commit]\": {\n    \"editor.rulers\": [\n      50,\n      72\n    ]\n  },\n  \"[markdown]\": {\n    \"editor.rulers\": [\n      120,\n    ]\n  },\n  \"files.associations\": {\n    \".gitmessage\": \"git-commit\",\n    \"*.toml\": \"toml\",\n  },\n}\n</code></pre> <p>This is can be useful as it will automatically set up linters, formatters and tests to give you feedback inline. It\u2019ll also set up your python interpreter to use the environment created by <code>uv</code>, and automatically activate this environment when you open a new shell.</p> <p>If you already have your setup and don\u2019t want to use these settings, feel free to modify/delete them.</p> <p>As this file can vary from developer to developer, depending on the extensions and customizations each wants per project, this file is added on the <code>.gitignore</code>, so it will only be available/generated upon project creation.</p>"},{"location":"tools_included/linters/","title":"Linters","text":""},{"location":"tools_included/linters/#ruff","title":"<code>ruff</code>","text":"<p>Linter for our python code.</p> <p>This comes bundled with several plugins enabled. You can check them and respective configs on <code>pyproject.toml</code>.</p> <p>For extra documentation on how to add and/or configure plugins, please see the ruff documentation.</p>"},{"location":"tools_included/linters/#mypy","title":"<code>mypy</code>","text":"<p>Used for static type checking in Python. The configurations are kinda strict, to enforce type annotations.</p> <p>Check configs on <code>pyproject.toml</code>.</p>"},{"location":"tools_included/linters/#shellcheck","title":"<code>shellcheck</code>","text":"<p>Used to lint our shell scripts.</p>"},{"location":"tools_included/makefile/","title":"Makefile","text":"<p>The project includes a <code>Makefile</code> to help automate some tasks. These tasks can be grouped into sections.</p>"},{"location":"tools_included/makefile/#system-dependencies","title":"System Dependencies","text":"<p>To check if you have all the required tools:</p> <pre><code>make doctor\n</code></pre>"},{"location":"tools_included/makefile/#project-dependencies","title":"Project Dependencies","text":"<p>Tasks that help you set up your environment (create a virtual environment, install packages and tools\u2026)</p>"},{"location":"tools_included/makefile/#install","title":"install","text":"<pre><code>make install\n</code></pre> <p>This will should be the first command to prepare your environment. It will set up several things:</p> <ol> <li> <p>create a <code>.python-version</code> file, that will tell <code>uv</code> which python version to use. Behind the scenes, it will look at the python version you select during project generation (which is stored in the variable <code>PYTHON_VERSION</code> on your Makefile), and will search for the latest version available and use it</p> </li> <li> <p><code>uv</code> will use this version and create your virtual environment on the project root (<code>.venv</code> folder), and then install the project dependencies</p> </li> <li> <p>if there\u2019s no git initialization in the project, it will perform a <code>git init</code>, if there is, it will be skipped</p> </li> <li> <p>next, it will install the <code>pre-commit</code> hooks and install the git message template</p> </li> </ol>"},{"location":"tools_included/makefile/#install-jupyter","title":"install-jupyter","text":"<pre><code>make install-jupyter\n</code></pre> <p>Install the dependencies to run jupyter notebooks. This target is only available if selected in the project setup (<code>include_notebooks</code>).</p>"},{"location":"tools_included/makefile/#install-docs","title":"install-docs","text":"<pre><code>make install-docs\n</code></pre> <p>Install the dependencies to build documentation. This target is only available if selected in the project setup (<code>include_docs</code>).</p>"},{"location":"tools_included/makefile/#requirementstxt","title":"requirements.txt","text":"<pre><code>make requirements.txt\n</code></pre> <p>This will update/generate the project <code>requirements.txt</code>, based on the installed dependencies from uv.</p>"},{"location":"tools_included/makefile/#checks","title":"Checks","text":"<p>Tasks to run linters, formatters and python dependencies vulnerabilities scanner</p>"},{"location":"tools_included/makefile/#format","title":"format","text":"<pre><code>make format\n</code></pre> <p>Runs all formatters: <code>sqlfluff</code> (SQL) and <code>ruff</code>(fix-only) on your src and tests directory. You can also run each check individually: <code>make format-sqlfluff</code> or <code>make format-ruff</code>.</p>"},{"location":"tools_included/makefile/#check-packages","title":"check-packages","text":"<pre><code>make check-packages\n</code></pre> <p>Runs checks on packages:</p> <ul> <li>Checks the validity of the <code>pyproject.toml</code> file</li> <li>Verify installed packages have compatible dependencies</li> <li>Run <code>safety check</code> to find vulnerabilities in Python dependencies</li> </ul>"},{"location":"tools_included/makefile/#lint","title":"lint","text":"<pre><code>make -k lint\n</code></pre> <p>Runs <code>sqlfluff</code>, <code>mypy</code> and <code>ruff</code> on your src and tests directory, and <code>shellcheck</code> on shell files. You can also run each check individually: <code>make lint-mypy</code>, <code>make lint-ruff</code> or <code>make lint-shellcheck</code>.</p>"},{"location":"tools_included/makefile/#check","title":"check","text":"<pre><code>make -k check\n</code></pre> <p>Runs both <code>check-packages</code> and <code>lint</code> targets.</p>"},{"location":"tools_included/makefile/#pre-commit","title":"pre-commit","text":"<pre><code>make pre-commit\n</code></pre> <p>Runs the pre-commit checks on all files.</p>"},{"location":"tools_included/makefile/#tests","title":"Tests","text":"<p>Tasks related to testing.</p>"},{"location":"tools_included/makefile/#test","title":"test","text":"<pre><code>make test\n</code></pre> <p>Runs the tests with <code>pytest</code>. As we\u2019re using <code>pytest-randomly</code> to shuffle the tests, if the last run of the tests fails, it will run the test with the same random seed first, and then, if the tests pass, it will run with a new one.</p>"},{"location":"tools_included/makefile/#read-coverage","title":"read-coverage","text":"<pre><code>make read-coverage\n</code></pre> <p>Opens the coverage report for the last pytest run.</p>"},{"location":"tools_included/makefile/#documentation","title":"Documentation","text":"<p>Tasks related to documentation. This section is only available if selected in the project setup (<code>include_docs</code>).</p>"},{"location":"tools_included/makefile/#build-docs","title":"build-docs","text":"<pre><code>make build-docs\n</code></pre> <p>Generate mkdocs documentation locally. The first this target is executed, it will run the target <code>install-docs</code> before.</p>"},{"location":"tools_included/makefile/#docs","title":"docs","text":"<pre><code>make docs\n</code></pre> <p>Build docs and serve them.</p>"},{"location":"tools_included/makefile/#build","title":"Build","text":"<p>Tasks related to builds.</p>"},{"location":"tools_included/makefile/#dist","title":"dist","text":"<pre><code>make dist\n</code></pre> <p>Builds the package, as a tarball and a wheel.</p>"},{"location":"tools_included/makefile/#cleanup","title":"Cleanup","text":"<p>Tasks to clean up.</p>"},{"location":"tools_included/makefile/#clean","title":"clean","text":"<pre><code>make clean\n</code></pre> <p>Delete all generated and temporary files.</p>"},{"location":"tools_included/makefile/#clean-all","title":"clean-all","text":"<pre><code>make clean-all\n</code></pre> <p>Delete the virtual environment and all generated and temporary files.</p>"},{"location":"tools_included/makefile/#docker","title":"Docker","text":"<p>Tasks related to docker. This section is only available if selected in the project setup (<code>include_docker</code>).</p>"},{"location":"tools_included/makefile/#build-docker","title":"build-docker","text":"<pre><code>make build-docker\n</code></pre> <p>Build the docker image.</p>"},{"location":"tools_included/makefile/#run-docker","title":"run-docker","text":"<pre><code>make run-docker\n</code></pre> <p>Run the docker container for the built image.</p>"},{"location":"tools_included/makefile/#other-tasks","title":"Other Tasks","text":""},{"location":"tools_included/makefile/#ci","title":"ci","text":"<pre><code>make -k ci\n</code></pre> <p>Run targets <code>format</code>, <code>check</code>, <code>test</code> and <code>build-docs</code> (if selected)</p>"},{"location":"tools_included/makefile/#jupyter","title":"jupyter","text":"<pre><code>make jupyter\n</code></pre> <p>Run jupyter notebooks on the notebooks directory (it will be created if it doesn\u2019t exist). The first this target is executed, it will run the target <code>install-jupyter</code> before.</p>"},{"location":"tools_included/pre-commit/","title":"<code>pre-commit</code>","text":"<p>Having <code>pre-commit</code> hooks allows one to run different types of checks in different stages.</p> <p>In this project, we\u2019re only installing by default hooks for <code>pre-commit</code>, <code>pre-push</code> and <code>commit-msg</code>. So if you want to add other stages, please make sure to install them before. If you have any doubts you can always check the documentation.</p> <p>Following is a list with the included hooks:</p> <ul> <li>commitizen: hook to verify your commit message follows the conventional commits (there\u2019s a <code>.gitmessage</code> template that is installed with your project that help you with that)</li> <li>trailing-whitespace: remove any trailing whitespace (ignores line breaks in markdown files)</li> <li>end-of-file-fixer: make sure all files ends with a new line</li> <li>check-yaml: attempts to load all yaml files to verify syntax</li> <li>check-symlinks: checks for symlinks which do not point to anything</li> <li>check-toml: attempts to load all TOML files to verify syntax</li> <li>check-added-large-files: prevent giant files from being committed (default: <code>1000kB</code>)</li> <li>check-packages: runs safety check linter</li> <li>ruff: runs ruff linter</li> <li>mypy: runs mypy type checker</li> <li>shellcheck: runs shellcheck linter</li> </ul>"},{"location":"tools_included/tests/","title":"Tests","text":"<p>For testing, we use <code>pytest</code> with some predefined configs (you can check it on <code>pyproject.toml</code> file). Additionaly, we\u2019re also packing pytest with some plugins:</p> <ul> <li>pytest-cov: produces coverage reports</li> <li>pytest-clarity: coloured diff output</li> <li>pytest-randomly: randomly order tests and controls random.seed</li> <li>pytest-env: enables you to set environment variables in the pytest config file</li> <li>xdoctest: allows executing tests in docstrings</li> </ul>"},{"location":"tools_included/uv/","title":"uv","text":"<p>An extremely fast Python package and project manager, written in Rust.</p> <p>The project uses <code>uv</code> to manage your dependencies in a deterministic way, to make sure everyone uses the same dependencies versions (and the dependencies of the dependencies).</p>"},{"location":"tools_included/uv/#basic-usage","title":"Basic usage","text":"<p>Here we describe some basic commands for <code>uv</code>, for more details and additional available commands, please refer to the documentation.</p>"},{"location":"tools_included/uv/#install-dependencies","title":"Install dependencies","text":"<p>Install the required dependencies from <code>uv.lock</code> file:</p> <pre><code>uv sync --frozen\n</code></pre> <p>In case there\u2019s no <code>uv.lock</code> file or you want to update your <code>uv.lock</code> file with the latest dependencies modifications in <code>pyproject.toml</code>, run:</p> <pre><code>uv sync\n</code></pre>"},{"location":"tools_included/uv/#add-new-dependencies","title":"Add new dependencies","text":"<p>If you want to add a new dependency to your core dependencies (let\u2019s say <code>django</code>), run:</p> <pre><code>uv add django\n</code></pre> <p>This will find a suitable version constraint and install the package and sub-dependencies.</p> <p>If you add to add a dependency the dev dependencies (let\u2019s say <code>pytest</code>), run:</p> <pre><code>uv add --group dev pytest\n</code></pre> <p>You can also specify a version constraint:</p> <pre><code>uv add django==4.0.0\n</code></pre> <p>In this case, uv uv install the exact specified <code>django</code> version.</p>"},{"location":"tools_included/uv/#update-dependencies","title":"Update dependencies","text":"<p>To update all your dependencies, to the latest allowed versions (according to constraints), run:</p> <pre><code>uv sync --upgrade\n</code></pre> <p>or a single one:</p> <pre><code>uv sync --upgrade-package &lt;package&gt;\n</code></pre> <p>or to specific version:</p> <pre><code>uv sync uv lock --upgrade-package &lt;package&gt;==&lt;version&gt;\n</code></pre>"},{"location":"tools_included/uv/#remove-dependencies","title":"Remove dependencies","text":"<p>To remove a dependency (let\u2019s say <code>django</code>), from your core dependency group run:</p> <pre><code>uv remove django\n</code></pre> <p>If it\u2019s a dev dependency run:</p> <pre><code>uv remove --group dev pytest\n</code></pre>"},{"location":"tools_included/uv/#show-package-details","title":"Show package details","text":"<p>Uv also allows you to check package details. To check all your required dependencies details run:</p> <pre><code>uv tree\n</code></pre>"},{"location":"tools_included/uv/#running-commands-using-your-virtual-environment","title":"Running commands using your virtual environment","text":"<p>To make sure you\u2019re running commands inside your project virtual environment just use:</p> <pre><code>uv run &lt;my_command&gt;\n</code></pre> <p>This will execute <code>&lt;my_command&gt;</code> from your virtual environment, and return to the environment where you were running. You can also run your command and pass the environment variables from a <code>.env</code> file:</p> <pre><code>uv run --env-file &lt;my_dotenv&gt; &lt;my_command&gt;\n</code></pre>"}]}
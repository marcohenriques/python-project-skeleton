# Uses multi-stage builds requiring Docker 17.05 or higher
# See https://docs.docker.com/develop/develop-images/multistage-build/

# Creating a python base with shared environment variables
FROM python:{{ cookiecutter.python_version }}-slim as python-base

# Needed for fixing permissions of files created by Docker
ARG UID=9999
ARG GID=9999

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_CACHE_DIR='/var/cache/pypoetry' \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    POETRY_VERSION=1.2.0 \
    # tini:
    TINI_VERSION=v0.19.0 \
    TINI_PATH=/usr/local/bin/tini \
    VENV_PATH="/app/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

WORKDIR /app

RUN groupadd -g "${GID}" -r web \
    && useradd -d /app -g web -l -r -u "${UID}" web \
    && chown web:web -R /app

RUN apt-get update && apt-get upgrade -y \
    && apt-get install --no-install-recommends -y \
    procps

# builder-base is used to build dependencies
FROM python-base as builder-base

# System deps, we don't use exact versions because it is hard to update them, pin when needed:
RUN apt-get update && apt-get upgrade -y \
    && apt-get install --no-install-recommends -y \
    bash \
    build-essential \
    curl \
    gettext \
    git \
    libpq-dev \
    procps \
    && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
    && curl -o $TINI_PATH -sSLO "https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini-${dpkgArch}" \
    && chmod +x $TINI_PATH && tini --version \
    # Installing `poetry` package manager:
    # https://github.com/python-poetry/poetry
    && curl -sSL 'https://install.python-poetry.org' | python - \
    && poetry --version \
    # Cleaning cache:
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && apt-get clean -y && rm -rf /var/lib/apt/lists/*

# We copy our Python requirements here to cache them
# and install only runtime deps using poetry
WORKDIR $PYSETUP_PATH
COPY ./poetry.lock ./pyproject.toml ./
RUN poetry run pip install -U pip \
    && poetry install --no-interaction --no-ansi --only main

# # 'production' stage uses the clean 'python-base' stage and copyies
# # in only our runtime deps that were installed in the 'builder-base'
FROM python-base as production

# Copying poetry, venv and tini into image
COPY --from=builder-base $POETRY_HOME $POETRY_HOME
COPY --from=builder-base $PYSETUP_PATH/.venv /app/.venv
COPY --from=builder-base $TINI_PATH $TINI_PATH

# Copying in our entrypoint
COPY ./docker/entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

WORKDIR /app
COPY . .

# Install project python package itself
RUN poetry install --no-interaction --no-ansi --only-root

# Running as non-root user:
USER web

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]


# 'development' stage installs all dev deps and can be used to develop code.
# For example using docker-compose to mount local volume under /app
FROM builder-base as development

# Installing dev deps:
RUN poetry install --no-interaction --no-ansi --with dev,docs,jupyter,tests \
    && mv $PYSETUP_PATH/.venv /app/.venv

ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Copying in our entrypoint
COPY ./docker/entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

WORKDIR /app

# Instead of copying the whole project, we could mount a volume to current directory:
# COPY . .

# Install project python package itself
COPY ./poetry.lock ./pyproject.toml ./
RUN poetry install --no-interaction --no-ansi --only-root

# Running as non-root user:
USER web

# We customize how our app is loaded with the custom entrypoint:
ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]

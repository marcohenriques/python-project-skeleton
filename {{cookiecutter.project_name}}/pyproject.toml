[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "0.0.1"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
maintainers = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
homepage = "https://github.com/{{ cookiecutter.github_username_or_org_name }}/{{ cookiecutter.project_name }}"
repository = "https://github.com/{{ cookiecutter.github_username_or_org_name }}/{{ cookiecutter.project_name }}"
{%- if cookiecutter.include_docs|lower == 'yes' %}
documentation = "https://{{ cookiecutter.github_username_or_org_name }}.github.io/{{ cookiecutter.project_name }}"
{%- endif %}
readme = "README.md"
keywords = []
license = ""
packages = [{ include = "{{cookiecutter.package_name}}", from = "src" }]
include = [{ path = "src/configs" }, { path = "tests", format = "sdist" }]
{% if cookiecutter.include_cli|lower == 'yes' %}
[tool.poetry.scripts]
{{cookiecutter.package_name}} = "{{cookiecutter.package_name}}.cli.main:app"
{% endif %}

####################
### DEPENDENCIES ###
####################

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"
pyyaml = "^6.0"
pydantic = "^1.9.1"
{%- if cookiecutter.include_cli|lower == 'yes' %}
typer = { extras = ["all"], version = "^0.7.0" }
{%- endif %}

[tool.poetry.group.dev.dependencies]
black = "^22.6.0"
ruff = "~0.0.242"
mypy = "^1.1.0"
safety = "^2.0.0"
pre-commit = "^3.0.0"
shellcheck-py = "^0.9.0.2"

[tool.poetry.group.tests]
optional = false
[tool.poetry.group.tests.dependencies]
pytest = "^7.1.2"
pytest-cov = "^4.0.0"
pytest-clarity = "^1.0.1"
pytest-randomly = "^3.12.0"
pytest-env = "^0.8.1"
xdoctest = "^1.0.1"
{% if cookiecutter.include_docs == "yes" %}
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
mkdocs = "^1.3.0"
mkdocs-material = "^8.3.9"
mkdocstrings = { extras = ["python"], version = "^0.19.0" }
{% endif %}{% if cookiecutter.include_notebooks == "yes" %}
[tool.poetry.group.jupyter]
optional = true
[tool.poetry.group.jupyter.dependencies]
jupyter = "^1.0.0"
nbqa = "^1.3.1"
jupyter-contrib-nbextensions = "^0.5.1"
{% endif %}

####################
### TOOLS CONFIG ###
####################

[tool.semantic_release]
branch = "main"
version_toml = "pyproject.toml:tool.poetry.version"
version_variable = "src/{{ cookiecutter.package_name }}/__init__.py:__version__"
upload_to_repository = false                                                     # set to true if you want to upload to pypi
upload_to_release = false                                                        # upload to github release


### FORMATTERS

[tool.black]
line-length = 100
ipynb = false


### LINTERS

[tool.ruff]
cache-dir = ".cache/.ruff_cache"
src = ["src", "tests"]
target-version = "{{ 'py' ~ cookiecutter.python_version | replace('.', '') }}"           # Always generate Python {{cookiecutter.python_version}}-compatible code.
line-length = 100
ignore-init-module-imports = true
extend-exclude = ["tests"]
show-fixes = true
force-exclude = true
format = "grouped"                # github
select = [
    # all rules: https://beta.ruff.rs/docs/rules/
    "ANN2", # flake8-annotations
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "E",    # pycodestyle
    "ERA",  # eradicate
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "PL",   # pylint
]
ignore = [
    "E501",  # Line length regulated by black
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception

    "D105", # Missing docstring in magic method
    # "D100", # Missing docstring in public module
    # "D103", # Missing docstring in public function
    # "D102", # Missing docstring in public method
    # "D104", # Missing docstring in public package
    # "D101", # Missing docstring in public class
]
unfixable = [
    "ERA001", # commented-out-code
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Body",
    "fastapi.Cookie",
    "fastapi.Depends",
    "fastapi.File",
    "fastapi.Form",
    "fastapi.Header",
    "fastapi.Path",
    "fastapi.Query",
    "fastapi.Security",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 5

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "TID252"]
"tests/*" = ["D103", "S101", "PLR2004"]


[tool.mypy]
plugins = ["pydantic.mypy"]
cache_dir = ".cache/mypy/"
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false


### TESTS

[tool.pytest.ini_options]
testpaths = ["tests", "src"]
addopts = [
    "--strict-markers",
    "-vv",
    "-r sxX",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--no-cov-on-fail",
    "--xdoc",
]
console_output_style = "count"
cache_dir = ".cache"
env = ["D:ENV=local"]


[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [".venv/*", "*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except DistributionNotFound",
    "TYPE_CHECKING",
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "0.1.0"
description = "{{cookiecutter.project_short_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.md"
repository = ""
keywords = []
maintainers = []
license = ""
homepage = ""
documentation = ""
packages = [
    { include = "{{cookiecutter.package_name}}", from = "src" }
]
include = [
    { path = "tests", format = "sdist" }
]
{% if cookiecutter.command_line_interface|lower == 'yes' %}
[tool.poetry.scripts]
{{cookiecutter.package_name}} = "{{cookiecutter.package_name}}.cli.main:app"
{% endif %}

####################
### DEPENDENCIES ###
####################

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"
pyyaml = "^6.0"
pydantic = "^1.9.1"
{%- if cookiecutter.command_line_interface|lower == 'yes' %}
typer = {extras = ["all"], version = "^0.5.0"}
{%- endif %}

[tool.poetry.group.dev.dependencies]
black = "^22.6.0"
isort = "^5.10.1"
flake8 = "^4.0.1"
mypy = "^0.961"
wemake-python-styleguide = "^0.16.1"
safety = "^2.0.0"
pre-commit = "^2.20.0"
shellcheck-py = "^0.8.0.4"

[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-clarity = "^1.0.1"
pytest-randomly = "^3.12.0" # random shuffle tests
xdoctest = "^1.0.1"
{% if cookiecutter.docs_tool == "yes" %}
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
mdx-include = "^1.4.1"
mkdocs = "^1.3.0"
mkdocs-material = "^8.3.9"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
{% endif %}{% if cookiecutter.notebooks_support == "yes" %}
[tool.poetry.group.jupyter]
optional = true
[tool.poetry.group.jupyter.dependencies]
jupyter = "^1.0.0"
nbqa = "^1.3.1"
jupyter-contrib-nbextensions = "^0.5.1"
{% endif %}

####################
### TOOLS CONFIG ###
####################

[tool.black]
target-version = ["py36", "py37", "py38"]
line-length = 99
ipynb = false


[tool.isort]
profile = "black"
combine_as_imports = true
lines_after_imports = 2
line_length = 99


[tool.mypy]
plugins = [
  "pydantic.mypy",
]
cache_dir = ".cache/mypy/"
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false


[tool.pytest.ini_options]
testpaths = ["tests", "src"]
addopts = [
    "--strict",
    "-vv",
    "-r sxX",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--no-cov-on-fail",
    "--xdoc",
]
console_output_style = "count"
cache_dir = ".cache"
markers = ""
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [".venv/*", "*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except DistributionNotFound",
    "TYPE_CHECKING",
]

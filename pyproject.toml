[project]
name = "python-project-skeleton"
version = "0.5.0"
description = "Cookiecutter template for Python projects"
readme = "README.md"
keywords = []
authors = [
  {name = "Marco Henriques", email = "marco.martins.henriques@gmail.com"},
]
maintainers = [
  {name = "Marco Henriques", email = "marco.martins.henriques@gmail.com"},
]
requires-python = ">=3.13"
dependencies = []

[project.urls]
Homepage = "https://github.com/marcohenriques/python-project-skeleton"
Documentation = "https://marcohenriques.github.io/python-project-skeleton/"
Repository = "https://github.com/marcohenriques/python-project-skeleton"
"Bug Tracker" = "https://github.com/marcohenriques/python-project-skeleton/issues"
Changelog = "https://github.com/marcohenriques/python-project-skeleton/blob/main/CHANGELOG.md"

[project.optional-dependencies]

[tool.uv]
package = false

[dependency-groups]
dev = [
    "commitizen>=3.29.1",
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.40",
    "mkdocstrings[python]>=0.26.1",
    "mypy>=1.11.2",
    "pre-commit>=4.0.1",
    "pygments>=2.18.0",
    "pymdown-extensions>=10.11.2",
    "pytest>=8.3.3",
    "pytest-clarity>=1.0.1",
    "pytest-cookies>=0.7.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.6.9",
    "safety>=2,<3",
    "shellcheck-py>=0.10.0.1",
    "xdoctest>=1.2.0",
    "pytest-randomly>=3.15.0",
    "sqlfluff>=3.2.3",
    "deptry>=0.20.0",
    "pytest-env>=1.1.5",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.9",
]


####################
### TOOLS CONFIG ###
####################

[tool.commitizen]
version = "0.5.0"
version_files = [
    "pyproject.toml:version",
]

### LINTERS / FORMATTERS

# ruff
[tool.ruff]
cache-dir = ".cache/ruff"
src = ["hooks", "tests"]
target-version = "py313"  # Always generate Python 3.13-compatible code.
line-length = 100
show-fixes = true
force-exclude = true
output-format = "grouped"

[tool.ruff.lint]
select = [
    # all rules: https://docs.astral.sh/ruff/rules/
    "ANN2", # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "E",    # pycodestyle
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "I",    # isort
    "N",    # pep8-naming
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "RUF",  # ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle
]
ignore = [
    "E501",  # line length regulated by formatter
    "PD901", # df is a bad variable name. Be kinder to your future self.
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception

    # "D100", # Missing docstring in public module
    # "D101", # Missing docstring in public class
    # "D102", # Missing docstring in public method
    # "D103", # Missing docstring in public function
    # "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__

    # # conflicts with formatter
    "COM812", # Trailing comma missing
    # "COM819", # Trailing comma prohibited
    # "D206",   # Docstring should be indented with spaces, not tabs
    # "W191",   # Indentation contains tabs
]
unfixable = [
    "ERA001", # commented-out-code
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Body",
    "fastapi.Cookie",
    "fastapi.Depends",
    "fastapi.File",
    "fastapi.Form",
    "fastapi.Header",
    "fastapi.Path",
    "fastapi.Query",
    "fastapi.Security",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 5

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "TID252"]
"tests/*" = ["D103", "S101", "PLR2004"]

# mypy
[tool.mypy]
cache_dir = ".cache/mypy"
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# sqlfluff
[tool.sqlfluff.core]
# dialect = snowflake
templater = "python"
max_line_length = 120
exclude_rules = "aliasing.forbid, structure.column_order, jinja.padding"

[tool.sqlfluff.templater.python.context]
SOME_VAR_NAME = "some_var_value"

[tool.sqlfluff.rules.aliasing.table]
aliasing = "explicit"
[tool.sqlfluff.rules.aliasing.column]
aliasing = "explicit"
[tool.sqlfluff.rules.aliasing.length]
min_alias_length = 3

[tool.sqlfluff.rules.capitalisation.keywords]
capitalisation_policy = "upper"
[tool.sqlfluff.rules.capitalisation.functions]
extended_capitalisation_policy = "upper"
[tool.sqlfluff.rules.capitalisation.literals]
extended_capitalisation_policy = "upper"
[tool.sqlfluff.rules.capitalisation.types]
extended_capitalisation_policy = "upper"

[tool.sqlfluff.rules.layout.long_lines]
ignore_comment_lines = true
ignore_comment_clauses = true

[tool.sqlfluff.rules.references.keywords]
ignore_words = "location, language, name"


### TESTS

[tool.pytest.ini_options]
testpaths = ["tests", "src"]
addopts = [
    "--strict-markers",
    "-vv",
    "-r sxX",
    # "--cov=src",
    "--cov-report=html:.cache/htmlcov",
    "--cov-report=term-missing:skip-covered",
    "--no-cov-on-fail",
    # "--xdoc",
]
console_output_style = "count"
cache_dir = ".cache/pytest"
env = ["D:ENV=local"]


[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [".venv/*", "*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except DistributionNotFound",
    "TYPE_CHECKING",
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.poetry]
package-mode = false
name = "python-project-skeleton"
version = "0.4.0"
description = "Cookiecutter template for Python projects"
authors = ["Marco Henriques <marco.martins.henriques@gmail.com>"]
maintainers = ["Marco Henriques <marco.martins.henriques@gmail.com>"]
homepage = "https://github.com/marcohenriques/python-project-skeleton"
repository = "https://github.com/marcohenriques/python-project-skeleton"
documentation = "https://marcohenriques.github.io/python-project-skeleton/"
readme = "README.md"
keywords = []
license = ""

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.0"
mypy = "^1.1.0"
safety = "^3.1.0"
pre-commit = "^3.0.0"
shellcheck-py = "^0.10.0.1"
commitizen = "^3.21.3"

[tool.poetry.group.tests]
optional = false
[tool.poetry.group.tests.dependencies]
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-clarity = "^1.0.1"
pytest-cookies = "^0.6.1"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.1"
mkdocs-material = "^8.5.7"
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
pygments = "^2.13.0"
pymdown-extensions = "^10.0"
mike = "^1.1.2"


####################
### TOOLS CONFIG ###
####################

[tool.commitizen]
version = "0.4.0"
version_files = [
    "pyproject.toml:version",
]


### LINTERS

[tool.ruff]
cache-dir = ".cache/ruff"
src = ["src", "tests"]
target-version = "py38"  # Always generate Python {{cookiecutter.python_version}}-compatible code.
line-length = 100
ignore-init-module-imports = true
extend-exclude = ["tests"]
show-fixes = true
force-exclude = true
output-format = "grouped"
select = [
    # all rules: https://docs.astral.sh/ruff/rules/
    "ANN2", # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "COM",  # flake8-commas
    "D",    # pydocstyle
    "E",    # pycodestyle
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "FA",   # flake8-future-annotations
    "I",    # isort
    "N",    # pep8-naming
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "Q",    # flake8-quotes
    "RUF",  # ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle
]
ignore = [
    "E501",  # Line length regulated by formatter
    "PD901", # df is a bad variable name. Be kinder to your future self.
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception

    "D105", # Missing docstring in magic method
    # "D100", # Missing docstring in public module
    # "D103", # Missing docstring in public function
    # "D102", # Missing docstring in public method
    # "D104", # Missing docstring in public package
    # "D101", # Missing docstring in public class
]
unfixable = [
    "ERA001", # commented-out-code
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Body",
    "fastapi.Cookie",
    "fastapi.Depends",
    "fastapi.File",
    "fastapi.Form",
    "fastapi.Header",
    "fastapi.Path",
    "fastapi.Query",
    "fastapi.Security",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 5

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "TID252"]
"tests/*" = ["D103", "S101", "PLR2004"]


[tool.mypy]
plugins = []
cache_dir = ".cache/mypy"
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false


### TESTS

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--strict",
    "-vv",
    "-r sxX",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--no-cov-on-fail",
]
console_output_style = "count"
cache_dir = ".cache/pytest"
filterwarnings = ["ignore::DeprecationWarning"]
